type Mutation {
applyLsGiftCard(input: ApplyLsGiftCardInput): LsGiftCardOutput @resolver(class: "Ls\\OmniGraphQl\\Model\\Resolver\\GiftCard\\ApplyGiftCard") @doc(description: "Redeem gift card code")
removeLsGiftCard(input: RemoveLsGiftCardInput): LsGiftCardOutput @resolver(class: "Ls\\OmniGraphQl\\Model\\Resolver\\GiftCard\\RemoveGiftCard") @doc(description: "Remove gift card code")
applyLsLoyaltyPoints(input: ApplyLsLoyaltyPointsInput): LsLoyaltyPointsOutput @resolver(class: "Ls\\OmniGraphQl\\Model\\Resolver\\LoyaltyPoints\\ApplyLoyaltyPoints") @doc(description: "Redeem loyalty points")
removeLsLoyaltyPoints(input: RemoveLsLoyaltyPointsInput): LsLoyaltyPointsOutput @resolver(class: "Ls\\OmniGraphQl\\Model\\Resolver\\LoyaltyPoints\\RemoveLoyaltyPoints") @doc(description: "Remove loyalty points")
}

input ApplyLsGiftCardInput {
      cart_id: String! @doc(description: "Specifies the quote id and set the gift card code.")
      code: String! @doc(description: "Specifies the gift card code.")
      amount: Float! @doc(description: "Specifies how much gift card amount will be applied.")
}

input RemoveLsGiftCardInput {
      cart_id: String! @doc(description: "Specifies the quote id and remove the gift card code.")
}

type LsGiftCardOutput {
    cart: Cart!
}

type LsLoyaltyPointsOutput {
    cart: Cart!
}

type AppliedGiftCard {
    code: String
    amount: Float
}

input ApplyLsLoyaltyPointsInput {
      cart_id: String! @doc(description: "Specifies the quote id and set the gift card code.")
      loyalty_points: Float! @doc(description: "Specifies the loyalty points to be redeemed")
}

input RemoveLsLoyaltyPointsInput {
      cart_id: String! @doc(description: "Specifies the quote id and remove the loyalty points.")
}

type AppliedLoyaltyPoints {
    points_earn: Float
    points_spent: Float
    points_discount: Float
    point_rate: Float
}

type Cart {
     applied_gift_card: AppliedGiftCard @resolver(class: "\\Ls\\OmniGraphQl\\Model\\Resolver\\GiftCard\\AppliedGiftCard") @doc(description:"An array of `Gift Card` object.")
     loyalty_points_info: AppliedLoyaltyPoints @resolver(class: "\\Ls\\OmniGraphQl\\Model\\Resolver\\LoyaltyPoints\\LoyaltyPointsInfo") @doc(description:"An array of `Loyalty Point` object.")
}

type Order {
    document_id: String @doc(description: "Ls Central Order Id")
    pickup_store_id: String @doc(description: "Order Pickup Store ID")
    pickup_store_name: String @doc(description: "Order Pickup Store Name")
    pickup_date_timeslot: String @doc(description: "Order Pickup date and time")
}

type Query {
    item_availability (
     parent_sku: String @doc(description: "Parent item sku if applicable.")
     sku: String! @doc(description: "Item Sku whose availability is required.")
    ): ItemAvailabilityOutput @resolver( class: "Ls\\OmniGraphQl\\Model\\Resolver\\Stock\\ItemAvailabilityOutput") @doc(description: "Get list of all the stores where given item is available.")
    click_and_collect_stores: ClickAndCollectStoresOutput @resolver(class: "Ls\\OmniGraphQl\\Model\\Resolver\\ClickAndCollectStoresOutput") @doc(description: "Get list of all the stores which support click and collect.")
    cart_items_availability_in_store (
     cart_id: String! @doc(description: "Valid cart Id.")
     store_id: String! @doc(description: "Click and collect store where stock needs to be checked.")
    ): CartItemsAvailabilityInStoreOutput @resolver( class: "Ls\\OmniGraphQl\\Model\\Resolver\\Stock\\CartItemsAvailabilityInStoreOutput") @doc(description: "Get stock information for each item in the cart.")
    return_policy (
         item_id: String @doc(description: "Get return policy of particular item.")
         variant_id: String @doc(description: "Get return policy of particular variant.")
         store_id: String @doc(description: "Get return policy based on store.")
   ): ReturnPolicyOutput @resolver( class: "Ls\\OmniGraphQl\\Model\\Resolver\\ReturnPolicyOutput") @doc(description: "Get return policy output")
   order_taking_calendar (
    store_id: String! @doc(description: "Store ID.")
   ): OrderTakingCalendarOutput @resolver(class: "Ls\\OmniGraphQl\\Model\\Resolver\\OrderTakingCalendarOutput") @doc(description: "Get Order taking calender.")
}

type CartItemsAvailabilityInStoreOutput {
    stock: [StockData] @doc(description: "Array of all stock Data.")
}

type StockData {
    sku: String @doc(description: "Item Sku.")
    name: String @doc(description: "ID name.")
    qty: String @doc(description: "Item quantity.")
    status: String @doc(description: "Stock Status.")
    display: String @doc(description: "Remarks.")
}

input SetShippingMethodsOnCartInput {
    store_id: String @doc(description: "Pickup Store ID only applicable for click and collect.")
    pickup_date: String @doc(description: "Pickup Date if applicable.")
    pickup_time_slot: String @doc(description: "Pickup Time slot if applicable.")
}

type ItemAvailabilityOutput {
    stores: [StoreData] @doc(description: "Array of all stores Data.")
}

type ClickAndCollectStoresOutput {
    stores: [StoreData] @doc(description: "Array of all stores Data.")
}

type StoreData {
    store_id: String @doc(description: "ID of the store.")
    store_name: String @doc(description: "Name of the store.")
    click_and_collect_accepted: Boolean @doc(description: "Whether or not click and collect accepted in the store.")
    latitude: String @doc(description: "Latitude of the store.")
    longitude: String @doc(description: "Longitude of the store.")
    phone: String @doc(description: "Phone number of the store.")
    city: String @doc(description: "City where the store is located.")
    country: String @doc(description: "Country where the store is located.")
    county: String @doc(description: "County where the store is located.")
    state: String @doc(description: "State where the store is located.")
    zip_code: String @doc(description: "Zip Code where the store is located.")
    currency_accepted: String @doc(description: "Which currency is accepted in the store.")
    street: String @doc(description: "Street Address of the store.")
    available_hospitality_sales_types: [String] @doc(description: "Available hospitality sales types")
    store_hours: [StoreHoursData] @doc(description: "Array of all types of store operating hours.")
}

type SelectedShippingMethod {
    pickup_store: StoreInfo @resolver(class: "Ls\\Hospitality\\Model\\Resolver\\Cart\\StoreInfoOutput") @doc(description: "Fetch Pickup StoreId from Quote.")
}

type StoreInfo @doc(description: "Defines the pick up store id and store name.") {
    store_id: String @doc(description: "To fetch store id")
    store_name: String @doc(description: "To fetch store name")
    pickup_date: String @doc(description: "To fetch pickup date ")
    pickup_time: String @doc(description: "To fetch pickup time")
}

type StoreHoursData {
    day_of_week: String @doc(description: "Day of week.")
    hour_types: [HourType] @doc(description: "Array of different store hour types.")
}

type HourType {
    type: String @doc(description: "Type of store hour.")
    opening_time: String @doc(description: "Opening timing.")
    closing_time: String @doc(description: "Closing timing.")
}

type CartPrices {
    vat: CartVat @doc(description: "Tax value.")
}

type CartVat {
    amount: Money!
}

type ReturnPolicyOutput {
    text: String @doc(description: "Return policy output text")
}

type OrderTakingCalendarOutput {
    dates: [DatesData] @doc(description: "Array of all order taking dates data.")
}

type DatesData {
    date: String @doc(description: "Date of order taking slot.")
    slots: [String] @doc(description: "Available slots of order taking date.")
}

type StoreConfig {
    maps_api_key: String @doc(description: "To fetch Google Maps API key.")
    default_latitude: Float @doc(description: "To fetch default latitude.")
    default_longitude: Float @doc(description: "To fetch default longitude.")
    default_zoom: Float @doc(description: "To fetch default zoom value.")
    items_availability: Boolean @doc(description: "Indicates whether to show only those stores where all the cart items are in stock (true) or all the stores (false) for click and collect on checkout.")
    click_and_collect_payment_methods: String @doc(description: "To fetch the configured payment methods for click and collect.")
    ls_recommend: Boolean @resolver(class: "\\Ls\\OmniGraphQl\\Model\\Resolver\\IsServiceUpResolver") @doc(description:"Indicates whether LS Recommend display is enabled (true) or disabled (false).")
    ls_recommend_product: Boolean @doc(description:"Indicates whether LS Recommend display on product page is enabled (true) or disabled (false).")
    ls_recommend_cart: Boolean @doc(description:"Indicates whether LS Recommend display on cart is enabled (true) or disabled (false).")
    ls_recommend_checkout: Boolean @doc(description:"Indicates whether LS Recommend display on checkout is enabled (true) or disabled (false).")
    loyalty_points_active: Boolean @resolver(class: "\\Ls\\OmniGraphQl\\Model\\Resolver\\IsServiceUpResolver") @doc(description:"Indicates whether loyalty elements display is enabled (true) or disabled (false) in cart and checkout based on omni connection online/offline mode.")
    loyalty_points_cart: Boolean @doc(description:"Indicates whether loyalty points display on cart is enabled (true) or disabled (false).")
    loyalty_points_checkout: Boolean @doc(description:"Indicates whether loyalty points display on checkout is enabled (true) or disabled (false).")
    ls_coupons_active: Boolean @resolver(class: "\\Ls\\OmniGraphQl\\Model\\Resolver\\IsServiceUpResolver") @doc(description:"Indicates whether coupon code elements display is enabled (true) or disabled (false) in cart and checkout based on omni connection online/offline mode.")
    ls_coupons_cart: Boolean @doc(description:"Indicates whether coupons display on cart is enabled (true) or disabled (false).")
    ls_coupons_checkout: Boolean @doc(description:"Indicates whether coupons display on checkout is enabled (true) or disabled (false).")
    ls_giftcard_active: Boolean @resolver(class: "\\Ls\\OmniGraphQl\\Model\\Resolver\\IsServiceUpResolver") @doc(description:"Indicates whether gift card elements display is enabled (true) or disabled (false) in cart and checkout based on omni connection online/offline mode.")
    ls_giftcard_cart: Boolean @doc(description:"Indicates whether giftcard display on cart is enabled (true) or disabled (false).")
    ls_giftcard_checkout: Boolean @doc(description:"Indicates whether giftcard display on checkout is enabled (true) or disabled (false).")
    coupon_recommendations: Boolean @doc(description:"Indicates whether coupon recommendations display in cart and checkout is enabled (true) or disabled (false).")
    ls_discount_mixandmatch_limit: Int @doc(description:"Discounted products display limit on PDP.")
    ls_discounts_product_page: Boolean @doc(description:"Indicates whether discounts on product page display is enabled (true) or disabled (false).")
    ls_discounts_login_register_notice: Boolean @doc(description:"Indicates whether Login/Register display is enabled (true) or disabled (false).")
    opening_hours_time_format: String @doc(description:"Opening Hours time format.")
    pickup_date_time_slot: Boolean @doc(description:"Indicates whether delivery pickup date time slot display is enabled (true) or disabled (false).")
    pickup_time_interval: Int @doc(description:"Pickup time interval.")
    pickup_date_format: String @doc(description:"Pickup date format.")
    pickup_time_format: String @doc(description:"Pickup time format.")
    ls_mag_ls_industry_ls_choose_industry: String @doc(description: "To fetch currently configured industry.")
    ls_mag_product_availability: Boolean @resolver(class: "\\Ls\\OmniGraphQl\\Model\\Resolver\\IsServiceUpResolver") @doc(description:"Indicates whether to show a link in product detail page for product availability (true) or not (false) based on omni connection online/offline mode.")
    ls_mag_display_stores: Boolean @doc(description:"Indicates whether to show all the stores (true) or only click and collect stores for product availability (false).")
}

input SetPaymentMethodOnCartInput {
    anonymous: Boolean @doc(description: "Indicates whether set payment method without shipping and billing address is enabled (true) or disabled (false).")
}
