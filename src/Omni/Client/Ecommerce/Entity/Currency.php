<?php
/**
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT MODIFY
 * @codingStandardsIgnoreFile
 */


namespace Ls\Omni\Client\Ecommerce\Entity;

use Ls\Omni\Client\Ecommerce\Entity\Enum\CurrencyRoundingMethod;
use Ls\Omni\Exception\InvalidEnumException;

class Currency extends Entity
{

    /**
     * @property CurrencyRoundingMethod $AmountRoundingMethod
     */
    protected $AmountRoundingMethod = null;

    /**
     * @property string $Culture
     */
    protected $Culture = null;

    /**
     * @property int $DecimalPlaces
     */
    protected $DecimalPlaces = null;

    /**
     * @property string $DecimalSeparator
     */
    protected $DecimalSeparator = null;

    /**
     * @property string $Description
     */
    protected $Description = null;

    /**
     * @property string $Postfix
     */
    protected $Postfix = null;

    /**
     * @property string $Prefix
     */
    protected $Prefix = null;

    /**
     * @property float $RoundOffAmount
     */
    protected $RoundOffAmount = null;

    /**
     * @property float $RoundOffSales
     */
    protected $RoundOffSales = null;

    /**
     * @property CurrencyRoundingMethod $SaleRoundingMethod
     */
    protected $SaleRoundingMethod = null;

    /**
     * @property string $Symbol
     */
    protected $Symbol = null;

    /**
     * @property string $ThousandSeparator
     */
    protected $ThousandSeparator = null;

    /**
     * @param CurrencyRoundingMethod|string $AmountRoundingMethod
     * @return $this
     * @throws InvalidEnumException
     */
    public function setAmountRoundingMethod($AmountRoundingMethod)
    {
        if ( ! $AmountRoundingMethod instanceof CurrencyRoundingMethod ) {
            if ( CurrencyRoundingMethod::isValid( $AmountRoundingMethod ) )
                $AmountRoundingMethod = new CurrencyRoundingMethod( $AmountRoundingMethod );
            elseif ( CurrencyRoundingMethod::isValidKey( $AmountRoundingMethod ) )
                $AmountRoundingMethod = new CurrencyRoundingMethod( constant( "CurrencyRoundingMethod::$AmountRoundingMethod" ) );
            elseif ( ! $AmountRoundingMethod instanceof CurrencyRoundingMethod )
                throw new InvalidEnumException();
        }
        $this->AmountRoundingMethod = $AmountRoundingMethod->getValue();

        return $this;
    }

    /**
     * @return CurrencyRoundingMethod
     */
    public function getAmountRoundingMethod()
    {
        return $this->AmountRoundingMethod;
    }

    /**
     * @param string $Culture
     * @return $this
     */
    public function setCulture($Culture)
    {
        $this->Culture = $Culture;
        return $this;
    }

    /**
     * @return string
     */
    public function getCulture()
    {
        return $this->Culture;
    }

    /**
     * @param int $DecimalPlaces
     * @return $this
     */
    public function setDecimalPlaces($DecimalPlaces)
    {
        $this->DecimalPlaces = $DecimalPlaces;
        return $this;
    }

    /**
     * @return int
     */
    public function getDecimalPlaces()
    {
        return $this->DecimalPlaces;
    }

    /**
     * @param string $DecimalSeparator
     * @return $this
     */
    public function setDecimalSeparator($DecimalSeparator)
    {
        $this->DecimalSeparator = $DecimalSeparator;
        return $this;
    }

    /**
     * @return string
     */
    public function getDecimalSeparator()
    {
        return $this->DecimalSeparator;
    }

    /**
     * @param string $Description
     * @return $this
     */
    public function setDescription($Description)
    {
        $this->Description = $Description;
        return $this;
    }

    /**
     * @return string
     */
    public function getDescription()
    {
        return $this->Description;
    }

    /**
     * @param string $Postfix
     * @return $this
     */
    public function setPostfix($Postfix)
    {
        $this->Postfix = $Postfix;
        return $this;
    }

    /**
     * @return string
     */
    public function getPostfix()
    {
        return $this->Postfix;
    }

    /**
     * @param string $Prefix
     * @return $this
     */
    public function setPrefix($Prefix)
    {
        $this->Prefix = $Prefix;
        return $this;
    }

    /**
     * @return string
     */
    public function getPrefix()
    {
        return $this->Prefix;
    }

    /**
     * @param float $RoundOffAmount
     * @return $this
     */
    public function setRoundOffAmount($RoundOffAmount)
    {
        $this->RoundOffAmount = $RoundOffAmount;
        return $this;
    }

    /**
     * @return float
     */
    public function getRoundOffAmount()
    {
        return $this->RoundOffAmount;
    }

    /**
     * @param float $RoundOffSales
     * @return $this
     */
    public function setRoundOffSales($RoundOffSales)
    {
        $this->RoundOffSales = $RoundOffSales;
        return $this;
    }

    /**
     * @return float
     */
    public function getRoundOffSales()
    {
        return $this->RoundOffSales;
    }

    /**
     * @param CurrencyRoundingMethod|string $SaleRoundingMethod
     * @return $this
     * @throws InvalidEnumException
     */
    public function setSaleRoundingMethod($SaleRoundingMethod)
    {
        if ( ! $SaleRoundingMethod instanceof CurrencyRoundingMethod ) {
            if ( CurrencyRoundingMethod::isValid( $SaleRoundingMethod ) )
                $SaleRoundingMethod = new CurrencyRoundingMethod( $SaleRoundingMethod );
            elseif ( CurrencyRoundingMethod::isValidKey( $SaleRoundingMethod ) )
                $SaleRoundingMethod = new CurrencyRoundingMethod( constant( "CurrencyRoundingMethod::$SaleRoundingMethod" ) );
            elseif ( ! $SaleRoundingMethod instanceof CurrencyRoundingMethod )
                throw new InvalidEnumException();
        }
        $this->SaleRoundingMethod = $SaleRoundingMethod->getValue();

        return $this;
    }

    /**
     * @return CurrencyRoundingMethod
     */
    public function getSaleRoundingMethod()
    {
        return $this->SaleRoundingMethod;
    }

    /**
     * @param string $Symbol
     * @return $this
     */
    public function setSymbol($Symbol)
    {
        $this->Symbol = $Symbol;
        return $this;
    }

    /**
     * @return string
     */
    public function getSymbol()
    {
        return $this->Symbol;
    }

    /**
     * @param string $ThousandSeparator
     * @return $this
     */
    public function setThousandSeparator($ThousandSeparator)
    {
        $this->ThousandSeparator = $ThousandSeparator;
        return $this;
    }

    /**
     * @return string
     */
    public function getThousandSeparator()
    {
        return $this->ThousandSeparator;
    }


}

