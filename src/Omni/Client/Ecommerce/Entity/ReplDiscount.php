<?php
/**
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT MODIFY
 * @codingStandardsIgnoreFile
 */


namespace Ls\Omni\Client\Ecommerce\Entity;

use Ls\Omni\Client\Ecommerce\Entity\Enum\DiscountValueType;
use Ls\Omni\Client\Ecommerce\Entity\Enum\ReplDiscountType;
use Ls\Omni\Exception\InvalidEnumException;

class ReplDiscount
{

    /**
     * @property string $CurrencyCode
     */
    protected $CurrencyCode = null;

    /**
     * @property string $CustomerDiscountGroup
     */
    protected $CustomerDiscountGroup = null;

    /**
     * @property string $Description
     */
    protected $Description = null;

    /**
     * @property string $Details
     */
    protected $Details = null;

    /**
     * @property float $DiscountValue
     */
    protected $DiscountValue = null;

    /**
     * @property DiscountValueType $DiscountValueType
     */
    protected $DiscountValueType = null;

    /**
     * @property string $FromDate
     */
    protected $FromDate = null;

    /**
     * @property boolean $IsDeleted
     */
    protected $IsDeleted = null;

    /**
     * @property string $ItemId
     */
    protected $ItemId = null;

    /**
     * @property string $LoyaltySchemeCode
     */
    protected $LoyaltySchemeCode = null;

    /**
     * @property float $MinimumQuantity
     */
    protected $MinimumQuantity = null;

    /**
     * @property string $ModifyDate
     */
    protected $ModifyDate = null;

    /**
     * @property string $OfferNo
     */
    protected $OfferNo = null;

    /**
     * @property int $PriorityNo
     */
    protected $PriorityNo = null;

    /**
     * @property string $StoreId
     */
    protected $StoreId = null;

    /**
     * @property string $ToDate
     */
    protected $ToDate = null;

    /**
     * @property ReplDiscountType $Type
     */
    protected $Type = null;

    /**
     * @property string $UnitOfMeasureId
     */
    protected $UnitOfMeasureId = null;

    /**
     * @property int $ValidationPeriodId
     */
    protected $ValidationPeriodId = null;

    /**
     * @property string $VariantId
     */
    protected $VariantId = null;

    /**
     * @property string $scope
     */
    protected $scope = null;

    /**
     * @property int $scope_id
     */
    protected $scope_id = null;

    /**
     * @param string $CurrencyCode
     * @return $this
     */
    public function setCurrencyCode($CurrencyCode)
    {
        $this->CurrencyCode = $CurrencyCode;
        return $this;
    }

    /**
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->CurrencyCode;
    }

    /**
     * @param string $CustomerDiscountGroup
     * @return $this
     */
    public function setCustomerDiscountGroup($CustomerDiscountGroup)
    {
        $this->CustomerDiscountGroup = $CustomerDiscountGroup;
        return $this;
    }

    /**
     * @return string
     */
    public function getCustomerDiscountGroup()
    {
        return $this->CustomerDiscountGroup;
    }

    /**
     * @param string $Description
     * @return $this
     */
    public function setDescription($Description)
    {
        $this->Description = $Description;
        return $this;
    }

    /**
     * @return string
     */
    public function getDescription()
    {
        return $this->Description;
    }

    /**
     * @param string $Details
     * @return $this
     */
    public function setDetails($Details)
    {
        $this->Details = $Details;
        return $this;
    }

    /**
     * @return string
     */
    public function getDetails()
    {
        return $this->Details;
    }

    /**
     * @param float $DiscountValue
     * @return $this
     */
    public function setDiscountValue($DiscountValue)
    {
        $this->DiscountValue = $DiscountValue;
        return $this;
    }

    /**
     * @return float
     */
    public function getDiscountValue()
    {
        return $this->DiscountValue;
    }

    /**
     * @param DiscountValueType|string $DiscountValueType
     * @return $this
     * @throws InvalidEnumException
     */
    public function setDiscountValueType($DiscountValueType)
    {
        if ( ! $DiscountValueType instanceof DiscountValueType ) {
            if ( DiscountValueType::isValid( $DiscountValueType ) )
                $DiscountValueType = new DiscountValueType( $DiscountValueType );
            elseif ( DiscountValueType::isValidKey( $DiscountValueType ) )
                $DiscountValueType = new DiscountValueType( constant( "DiscountValueType::$DiscountValueType" ) );
            elseif ( ! $DiscountValueType instanceof DiscountValueType )
                throw new InvalidEnumException();
        }
        $this->DiscountValueType = $DiscountValueType->getValue();

        return $this;
    }

    /**
     * @return DiscountValueType
     */
    public function getDiscountValueType()
    {
        return $this->DiscountValueType;
    }

    /**
     * @param string $FromDate
     * @return $this
     */
    public function setFromDate($FromDate)
    {
        $this->FromDate = $FromDate;
        return $this;
    }

    /**
     * @return string
     */
    public function getFromDate()
    {
        return $this->FromDate;
    }

    /**
     * @param boolean $IsDeleted
     * @return $this
     */
    public function setIsDeleted($IsDeleted)
    {
        $this->IsDeleted = $IsDeleted;
        return $this;
    }

    /**
     * @return boolean
     */
    public function getIsDeleted()
    {
        return $this->IsDeleted;
    }

    /**
     * @param string $ItemId
     * @return $this
     */
    public function setItemId($ItemId)
    {
        $this->ItemId = $ItemId;
        return $this;
    }

    /**
     * @return string
     */
    public function getItemId()
    {
        return $this->ItemId;
    }

    /**
     * @param string $LoyaltySchemeCode
     * @return $this
     */
    public function setLoyaltySchemeCode($LoyaltySchemeCode)
    {
        $this->LoyaltySchemeCode = $LoyaltySchemeCode;
        return $this;
    }

    /**
     * @return string
     */
    public function getLoyaltySchemeCode()
    {
        return $this->LoyaltySchemeCode;
    }

    /**
     * @param float $MinimumQuantity
     * @return $this
     */
    public function setMinimumQuantity($MinimumQuantity)
    {
        $this->MinimumQuantity = $MinimumQuantity;
        return $this;
    }

    /**
     * @return float
     */
    public function getMinimumQuantity()
    {
        return $this->MinimumQuantity;
    }

    /**
     * @param string $ModifyDate
     * @return $this
     */
    public function setModifyDate($ModifyDate)
    {
        $this->ModifyDate = $ModifyDate;
        return $this;
    }

    /**
     * @return string
     */
    public function getModifyDate()
    {
        return $this->ModifyDate;
    }

    /**
     * @param string $OfferNo
     * @return $this
     */
    public function setOfferNo($OfferNo)
    {
        $this->OfferNo = $OfferNo;
        return $this;
    }

    /**
     * @return string
     */
    public function getOfferNo()
    {
        return $this->OfferNo;
    }

    /**
     * @param int $PriorityNo
     * @return $this
     */
    public function setPriorityNo($PriorityNo)
    {
        $this->PriorityNo = $PriorityNo;
        return $this;
    }

    /**
     * @return int
     */
    public function getPriorityNo()
    {
        return $this->PriorityNo;
    }

    /**
     * @param string $StoreId
     * @return $this
     */
    public function setStoreId($StoreId)
    {
        $this->StoreId = $StoreId;
        return $this;
    }

    /**
     * @return string
     */
    public function getStoreId()
    {
        return $this->StoreId;
    }

    /**
     * @param string $ToDate
     * @return $this
     */
    public function setToDate($ToDate)
    {
        $this->ToDate = $ToDate;
        return $this;
    }

    /**
     * @return string
     */
    public function getToDate()
    {
        return $this->ToDate;
    }

    /**
     * @param ReplDiscountType|string $Type
     * @return $this
     * @throws InvalidEnumException
     */
    public function setType($Type)
    {
        if ( ! $Type instanceof ReplDiscountType ) {
            if ( ReplDiscountType::isValid( $Type ) )
                $Type = new ReplDiscountType( $Type );
            elseif ( ReplDiscountType::isValidKey( $Type ) )
                $Type = new ReplDiscountType( constant( "ReplDiscountType::$Type" ) );
            elseif ( ! $Type instanceof ReplDiscountType )
                throw new InvalidEnumException();
        }
        $this->Type = $Type->getValue();

        return $this;
    }

    /**
     * @return ReplDiscountType
     */
    public function getType()
    {
        return $this->Type;
    }

    /**
     * @param string $UnitOfMeasureId
     * @return $this
     */
    public function setUnitOfMeasureId($UnitOfMeasureId)
    {
        $this->UnitOfMeasureId = $UnitOfMeasureId;
        return $this;
    }

    /**
     * @return string
     */
    public function getUnitOfMeasureId()
    {
        return $this->UnitOfMeasureId;
    }

    /**
     * @param int $ValidationPeriodId
     * @return $this
     */
    public function setValidationPeriodId($ValidationPeriodId)
    {
        $this->ValidationPeriodId = $ValidationPeriodId;
        return $this;
    }

    /**
     * @return int
     */
    public function getValidationPeriodId()
    {
        return $this->ValidationPeriodId;
    }

    /**
     * @param string $VariantId
     * @return $this
     */
    public function setVariantId($VariantId)
    {
        $this->VariantId = $VariantId;
        return $this;
    }

    /**
     * @return string
     */
    public function getVariantId()
    {
        return $this->VariantId;
    }

    /**
     * @param string $scope
     * @return $this
     */
    public function setScope($scope)
    {
        $this->scope = $scope;
        return $this;
    }

    /**
     * @return string
     */
    public function getScope()
    {
        return $this->scope;
    }

    /**
     * @param int $scope_id
     * @return $this
     */
    public function setScopeId($scope_id)
    {
        $this->scope_id = $scope_id;
        return $this;
    }

    /**
     * @return int
     */
    public function getScopeId()
    {
        return $this->scope_id;
    }


}

