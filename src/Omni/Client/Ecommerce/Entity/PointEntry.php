<?php
/**
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT MODIFY
 * @codingStandardsIgnoreFile
 */


namespace Ls\Omni\Client\Ecommerce\Entity;

use Ls\Omni\Client\Ecommerce\Entity\Enum\MemberPointEntryType;
use Ls\Omni\Client\Ecommerce\Entity\Enum\MemberPointType;
use Ls\Omni\Client\Ecommerce\Entity\Enum\MemberPointSourceType;
use Ls\Omni\Exception\InvalidEnumException;

class PointEntry extends Entity
{
    /**
     * @property string $Date
     */
    protected $Date = null;

    /**
     * @property string $DocumentNo
     */
    protected $DocumentNo = null;

    /**
     * @property MemberPointEntryType $EntryType
     */
    protected $EntryType = null;

    /**
     * @property string $ExpirationDate
     */
    protected $ExpirationDate = null;

    /**
     * @property MemberPointType $PointType
     */
    protected $PointType = null;

    /**
     * @property float $Points
     */
    protected $Points = null;

    /**
     * @property float $RemainingPoints
     */
    protected $RemainingPoints = null;

    /**
     * @property MemberPointSourceType $SourceType
     */
    protected $SourceType = null;

    /**
     * @property string $StoreName
     */
    protected $StoreName = null;

    /**
     * @property string $StoreNo
     */
    protected $StoreNo = null;

    /**
     * @param string $Date
     * @return $this
     */
    public function setDate($Date)
    {
        $this->Date = $Date;
        return $this;
    }

    /**
     * @return string
     */
    public function getDate()
    {
        return $this->Date;
    }

    /**
     * @param string $DocumentNo
     * @return $this
     */
    public function setDocumentNo($DocumentNo)
    {
        $this->DocumentNo = $DocumentNo;
        return $this;
    }

    /**
     * @return string
     */
    public function getDocumentNo()
    {
        return $this->DocumentNo;
    }

    /**
     * @param MemberPointEntryType|string $EntryType
     * @return $this
     * @throws InvalidEnumException
     */
    public function setEntryType($EntryType)
    {
        if ( ! $EntryType instanceof MemberPointEntryType ) {
            if ( MemberPointEntryType::isValid( $EntryType ) )
                $EntryType = new MemberPointEntryType( $EntryType );
            elseif ( MemberPointEntryType::isValidKey( $EntryType ) )
                $EntryType = new MemberPointEntryType( constant( "MemberPointEntryType::$EntryType" ) );
            elseif ( ! $EntryType instanceof MemberPointEntryType )
                throw new InvalidEnumException();
        }
        $this->EntryType = $EntryType->getValue();

        return $this;
    }

    /**
     * @return MemberPointEntryType
     */
    public function getEntryType()
    {
        return $this->EntryType;
    }

    /**
     * @param string $ExpirationDate
     * @return $this
     */
    public function setExpirationDate($ExpirationDate)
    {
        $this->ExpirationDate = $ExpirationDate;
        return $this;
    }

    /**
     * @return string
     */
    public function getExpirationDate()
    {
        return $this->ExpirationDate;
    }

    /**
     * @param MemberPointType|string $PointType
     * @return $this
     * @throws InvalidEnumException
     */
    public function setPointType($PointType)
    {
        if ( ! $PointType instanceof MemberPointType ) {
            if ( MemberPointType::isValid( $PointType ) )
                $PointType = new MemberPointType( $PointType );
            elseif ( MemberPointType::isValidKey( $PointType ) )
                $PointType = new MemberPointType( constant( "MemberPointType::$PointType" ) );
            elseif ( ! $PointType instanceof MemberPointType )
                throw new InvalidEnumException();
        }
        $this->PointType = $PointType->getValue();

        return $this;
    }

    /**
     * @return MemberPointType
     */
    public function getPointType()
    {
        return $this->PointType;
    }

    /**
     * @param float $Points
     * @return $this
     */
    public function setPoints($Points)
    {
        $this->Points = $Points;
        return $this;
    }

    /**
     * @return float
     */
    public function getPoints()
    {
        return $this->Points;
    }

    /**
     * @param float $RemainingPoints
     * @return $this
     */
    public function setRemainingPoints($RemainingPoints)
    {
        $this->RemainingPoints = $RemainingPoints;
        return $this;
    }

    /**
     * @return float
     */
    public function getRemainingPoints()
    {
        return $this->RemainingPoints;
    }

    /**
     * @param MemberPointSourceType|string $SourceType
     * @return $this
     * @throws InvalidEnumException
     */
    public function setSourceType($SourceType)
    {
        if ( ! $SourceType instanceof MemberPointSourceType ) {
            if ( MemberPointSourceType::isValid( $SourceType ) )
                $SourceType = new MemberPointSourceType( $SourceType );
            elseif ( MemberPointSourceType::isValidKey( $SourceType ) )
                $SourceType = new MemberPointSourceType( constant( "MemberPointSourceType::$SourceType" ) );
            elseif ( ! $SourceType instanceof MemberPointSourceType )
                throw new InvalidEnumException();
        }
        $this->SourceType = $SourceType->getValue();

        return $this;
    }

    /**
     * @return MemberPointSourceType
     */
    public function getSourceType()
    {
        return $this->SourceType;
    }

    /**
     * @param string $StoreName
     * @return $this
     */
    public function setStoreName($StoreName)
    {
        $this->StoreName = $StoreName;
        return $this;
    }

    /**
     * @return string
     */
    public function getStoreName()
    {
        return $this->StoreName;
    }

    /**
     * @param string $StoreNo
     * @return $this
     */
    public function setStoreNo($StoreNo)
    {
        $this->StoreNo = $StoreNo;
        return $this;
    }

    /**
     * @return string
     */
    public function getStoreNo()
    {
        return $this->StoreNo;
    }
}

