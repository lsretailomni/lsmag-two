<?php
/**
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT MODIFY
 * @codingStandardsIgnoreFile
 */


namespace Ls\Omni\Client\Ecommerce\Entity;

use Ls\Omni\Client\Ecommerce\Entity\Enum\ProductChargeType;
use Ls\Omni\Exception\InvalidEnumException;

class AdditionalCharge
{

    /**
     * @property string $ActivityNo
     */
    protected $ActivityNo = null;

    /**
     * @property string $Description
     */
    protected $Description = null;

    /**
     * @property float $DiscountPercentage
     */
    protected $DiscountPercentage = null;

    /**
     * @property string $InvoiceReference
     */
    protected $InvoiceReference = null;

    /**
     * @property string $ItemNo
     */
    protected $ItemNo = null;

    /**
     * @property int $LineNo
     */
    protected $LineNo = null;

    /**
     * @property string $Optional
     */
    protected $Optional = null;

    /**
     * @property float $Price
     */
    protected $Price = null;

    /**
     * @property ProductChargeType $ProductType
     */
    protected $ProductType = null;

    /**
     * @property float $Quantity
     */
    protected $Quantity = null;

    /**
     * @property float $TotalAmount
     */
    protected $TotalAmount = null;

    /**
     * @property string $UnitOfMeasure
     */
    protected $UnitOfMeasure = null;

    /**
     * @param string $ActivityNo
     * @return $this
     */
    public function setActivityNo($ActivityNo)
    {
        $this->ActivityNo = $ActivityNo;
        return $this;
    }

    /**
     * @return string
     */
    public function getActivityNo()
    {
        return $this->ActivityNo;
    }

    /**
     * @param string $Description
     * @return $this
     */
    public function setDescription($Description)
    {
        $this->Description = $Description;
        return $this;
    }

    /**
     * @return string
     */
    public function getDescription()
    {
        return $this->Description;
    }

    /**
     * @param float $DiscountPercentage
     * @return $this
     */
    public function setDiscountPercentage($DiscountPercentage)
    {
        $this->DiscountPercentage = $DiscountPercentage;
        return $this;
    }

    /**
     * @return float
     */
    public function getDiscountPercentage()
    {
        return $this->DiscountPercentage;
    }

    /**
     * @param string $InvoiceReference
     * @return $this
     */
    public function setInvoiceReference($InvoiceReference)
    {
        $this->InvoiceReference = $InvoiceReference;
        return $this;
    }

    /**
     * @return string
     */
    public function getInvoiceReference()
    {
        return $this->InvoiceReference;
    }

    /**
     * @param string $ItemNo
     * @return $this
     */
    public function setItemNo($ItemNo)
    {
        $this->ItemNo = $ItemNo;
        return $this;
    }

    /**
     * @return string
     */
    public function getItemNo()
    {
        return $this->ItemNo;
    }

    /**
     * @param int $LineNo
     * @return $this
     */
    public function setLineNo($LineNo)
    {
        $this->LineNo = $LineNo;
        return $this;
    }

    /**
     * @return int
     */
    public function getLineNo()
    {
        return $this->LineNo;
    }

    /**
     * @param string $Optional
     * @return $this
     */
    public function setOptional($Optional)
    {
        $this->Optional = $Optional;
        return $this;
    }

    /**
     * @return string
     */
    public function getOptional()
    {
        return $this->Optional;
    }

    /**
     * @param float $Price
     * @return $this
     */
    public function setPrice($Price)
    {
        $this->Price = $Price;
        return $this;
    }

    /**
     * @return float
     */
    public function getPrice()
    {
        return $this->Price;
    }

    /**
     * @param ProductChargeType|string $ProductType
     * @return $this
     * @throws InvalidEnumException
     */
    public function setProductType($ProductType)
    {
        if ( ! $ProductType instanceof ProductChargeType ) {
            if ( ProductChargeType::isValid( $ProductType ) )
                $ProductType = new ProductChargeType( $ProductType );
            elseif ( ProductChargeType::isValidKey( $ProductType ) )
                $ProductType = new ProductChargeType( constant( "ProductChargeType::$ProductType" ) );
            elseif ( ! $ProductType instanceof ProductChargeType )
                throw new InvalidEnumException();
        }
        $this->ProductType = $ProductType->getValue();

        return $this;
    }

    /**
     * @return ProductChargeType
     */
    public function getProductType()
    {
        return $this->ProductType;
    }

    /**
     * @param float $Quantity
     * @return $this
     */
    public function setQuantity($Quantity)
    {
        $this->Quantity = $Quantity;
        return $this;
    }

    /**
     * @return float
     */
    public function getQuantity()
    {
        return $this->Quantity;
    }

    /**
     * @param float $TotalAmount
     * @return $this
     */
    public function setTotalAmount($TotalAmount)
    {
        $this->TotalAmount = $TotalAmount;
        return $this;
    }

    /**
     * @return float
     */
    public function getTotalAmount()
    {
        return $this->TotalAmount;
    }

    /**
     * @param string $UnitOfMeasure
     * @return $this
     */
    public function setUnitOfMeasure($UnitOfMeasure)
    {
        $this->UnitOfMeasure = $UnitOfMeasure;
        return $this;
    }

    /**
     * @return string
     */
    public function getUnitOfMeasure()
    {
        return $this->UnitOfMeasure;
    }


}

