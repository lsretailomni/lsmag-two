<?php
/**
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT MODIFY
 * @codingStandardsIgnoreFile
 */


namespace Ls\Omni\Client\Ecommerce\Entity;

use Ls\Omni\Client\Ecommerce\Entity\Enum\SPGSecurityTrigger;
use Ls\Omni\Exception\InvalidEnumException;

class ScanPayGoProfile extends Entity
{

    /**
     * @property ArrayOfScanPayGoTender $TenderTypes
     */
    protected $TenderTypes = null;

    /**
     * @property FeatureFlags $Flags
     */
    protected $Flags = null;

    /**
     * @property SPGSecurityTrigger $SecurityTrigger
     */
    protected $SecurityTrigger = null;

    /**
     * @property string $StoreId
     */
    protected $StoreId = null;

    /**
     * @param ArrayOfScanPayGoTender $TenderTypes
     * @return $this
     */
    public function setTenderTypes($TenderTypes)
    {
        $this->TenderTypes = $TenderTypes;
        return $this;
    }

    /**
     * @return ArrayOfScanPayGoTender
     */
    public function getTenderTypes()
    {
        return $this->TenderTypes;
    }

    /**
     * @param FeatureFlags $Flags
     * @return $this
     */
    public function setFlags($Flags)
    {
        $this->Flags = $Flags;
        return $this;
    }

    /**
     * @return FeatureFlags
     */
    public function getFlags()
    {
        return $this->Flags;
    }

    /**
     * @param SPGSecurityTrigger|string $SecurityTrigger
     * @return $this
     * @throws InvalidEnumException
     */
    public function setSecurityTrigger($SecurityTrigger)
    {
        if ( ! $SecurityTrigger instanceof SPGSecurityTrigger ) {
            if ( SPGSecurityTrigger::isValid( $SecurityTrigger ) )
                $SecurityTrigger = new SPGSecurityTrigger( $SecurityTrigger );
            elseif ( SPGSecurityTrigger::isValidKey( $SecurityTrigger ) )
                $SecurityTrigger = new SPGSecurityTrigger( constant( "SPGSecurityTrigger::$SecurityTrigger" ) );
            elseif ( ! $SecurityTrigger instanceof SPGSecurityTrigger )
                throw new InvalidEnumException();
        }
        $this->SecurityTrigger = $SecurityTrigger->getValue();

        return $this;
    }

    /**
     * @return SPGSecurityTrigger
     */
    public function getSecurityTrigger()
    {
        return $this->SecurityTrigger;
    }

    /**
     * @param string $StoreId
     * @return $this
     */
    public function setStoreId($StoreId)
    {
        $this->StoreId = $StoreId;
        return $this;
    }

    /**
     * @return string
     */
    public function getStoreId()
    {
        return $this->StoreId;
    }


}

