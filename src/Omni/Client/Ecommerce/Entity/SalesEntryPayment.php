<?php
/**
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT MODIFY
 * @codingStandardsIgnoreFile
 */


namespace Ls\Omni\Client\Ecommerce\Entity;

use Ls\Omni\Client\Ecommerce\Entity\Enum\PaymentType;
use Ls\Omni\Exception\InvalidEnumException;

class SalesEntryPayment
{

    /**
     * @property float $Amount
     */
    protected $Amount = null;

    /**
     * @property string $CardNo
     */
    protected $CardNo = null;

    /**
     * @property string $CardType
     */
    protected $CardType = null;

    /**
     * @property string $CurrencyCode
     */
    protected $CurrencyCode = null;

    /**
     * @property float $CurrencyFactor
     */
    protected $CurrencyFactor = null;

    /**
     * @property int $LineNumber
     */
    protected $LineNumber = null;

    /**
     * @property string $TenderType
     */
    protected $TenderType = null;

    /**
     * @property PaymentType $Type
     */
    protected $Type = null;

    /**
     * @param float $Amount
     * @return $this
     */
    public function setAmount($Amount)
    {
        $this->Amount = $Amount;
        return $this;
    }

    /**
     * @return float
     */
    public function getAmount()
    {
        return $this->Amount;
    }

    /**
     * @param string $CardNo
     * @return $this
     */
    public function setCardNo($CardNo)
    {
        $this->CardNo = $CardNo;
        return $this;
    }

    /**
     * @return string
     */
    public function getCardNo()
    {
        return $this->CardNo;
    }

    /**
     * @param string $CardType
     * @return $this
     */
    public function setCardType($CardType)
    {
        $this->CardType = $CardType;
        return $this;
    }

    /**
     * @return string
     */
    public function getCardType()
    {
        return $this->CardType;
    }

    /**
     * @param string $CurrencyCode
     * @return $this
     */
    public function setCurrencyCode($CurrencyCode)
    {
        $this->CurrencyCode = $CurrencyCode;
        return $this;
    }

    /**
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->CurrencyCode;
    }

    /**
     * @param float $CurrencyFactor
     * @return $this
     */
    public function setCurrencyFactor($CurrencyFactor)
    {
        $this->CurrencyFactor = $CurrencyFactor;
        return $this;
    }

    /**
     * @return float
     */
    public function getCurrencyFactor()
    {
        return $this->CurrencyFactor;
    }

    /**
     * @param int $LineNumber
     * @return $this
     */
    public function setLineNumber($LineNumber)
    {
        $this->LineNumber = $LineNumber;
        return $this;
    }

    /**
     * @return int
     */
    public function getLineNumber()
    {
        return $this->LineNumber;
    }

    /**
     * @param string $TenderType
     * @return $this
     */
    public function setTenderType($TenderType)
    {
        $this->TenderType = $TenderType;
        return $this;
    }

    /**
     * @return string
     */
    public function getTenderType()
    {
        return $this->TenderType;
    }

    /**
     * @param PaymentType|string $Type
     * @return $this
     * @throws InvalidEnumException
     */
    public function setType($Type)
    {
        if ( ! $Type instanceof PaymentType ) {
            if ( PaymentType::isValid( $Type ) )
                $Type = new PaymentType( $Type );
            elseif ( PaymentType::isValidKey( $Type ) )
                $Type = new PaymentType( constant( "PaymentType::$Type" ) );
            elseif ( ! $Type instanceof PaymentType )
                throw new InvalidEnumException();
        }
        $this->Type = $Type->getValue();

        return $this;
    }

    /**
     * @return PaymentType
     */
    public function getType()
    {
        return $this->Type;
    }


}

