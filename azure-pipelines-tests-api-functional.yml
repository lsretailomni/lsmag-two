trigger:
  branches:
    exclude:
      - '*'
resources:
  containers:
    - container: db
      image: $(MARIA_DB_IMAGE)
      ports:
        - '3306:3306'
      env:
        MYSQL_DATABASE: users
        MYSQL_USER: mysql
        MYSQL_PASSWORD: mysql
        MYSQL_ROOT_PASSWORD: mysql
    - container: elasticsearch
      image: $(ELASTIC_SEARCH_IMAGE)
      ports:
        - "9200:9200"
        - "9300:9300"
      env:
        discovery.type: single-node
        ES_JAVA_OPTS: -Xms1g -Xmx1g
        cluster.routing.allocation.disk.threshold_enabled: false
pool:
  vmImage: ubuntu-24.04

services:
  db: db
  elasticsearch: elasticsearch

strategy:
  matrix:
    magento_2_4_7_php_8_3:
      phpVersion: '8.3'
      magentoVersion: '2.4.7-p3'
      databaseName: 'magento_2_4_7_php_8_2'
      composerOverride: '{}'
      phpunitVersion: '^9'
      magentoDirectory: "/var/www/html"

steps:

  - script: |
      sudo update-alternatives --set php /usr/bin/php$(phpVersion)
      sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
      sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
      sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
      sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
      php -version
    displayName: 'Use PHP Version $(phpVersion)'

  - script: |
      sudo apt-get install default-mysql-client
      printf 'Waiting for MySQL database to accept connections'
      until mysql --host 127.0.0.1 --user=mysql --password=mysql --execute "SHOW DATABASES"; do
        printf '.'
        sleep 1;
      done;
    displayName: 'Wait for Database to initialise'

  - script: |
      printf 'Waiting for elasticsearch to accept connections'
      until curl -XGET '0.0.0.0:9200/'; do
      printf '.'
      sleep 1;
      done;
    displayName: 'Wait for Elasticsearch to initialise'

  - script: |
      sudo apt-get update
      sudo apt-get install -y apache2 libapache2-mod-php
      sudo a2enmod rewrite
      sudo service apache2 start
      echo "Apache2 installed and started successfully."
      AGENT_USER=$(whoami)
      sudo sed -i "s/www-data/${AGENT_USER}/g" /etc/apache2/envvars
      # Ensure the DocumentRoot directory has the correct permissions
      sudo chown -R ${AGENT_USER}:${AGENT_USER} /var/www/html
      sudo chmod -R 775 /var/www/html
      sudo tee /etc/apache2/sites-available/magento.conf > /dev/null <<EOF
          <VirtualHost *:80>
              ServerAdmin webmaster@localhost
              DocumentRoot /var/www/html
              ServerName mag.localhost.com
              DocumentRoot /var/www/html
              <Directory /var/www/html>
                Options Indexes FollowSymLinks MultiViews
                AllowOverride All
                Order allow,deny
                allow from all
              </Directory>
              ErrorLog \${APACHE_LOG_DIR}/error.log
              CustomLog \${APACHE_LOG_DIR}/access.log combined
        </VirtualHost>
      EOF
          sudo ln -s /etc/apache2/sites-available/magento.conf /etc/apache2/sites-enabled/magento.conf
          echo "127.0.0.1 mag.localhost.com" | sudo tee -a /etc/hosts
          sudo systemctl restart apache2
          echo "Magento Apache2 configuration applied."
    displayName: 'Install and Start Apache2'

  - script: |
      cd $(magentoDirectory)
      mkdir -p artifacts/lsretail/lsmag-two
      cp -a /home/vsts/work/1/s/. $(magentoDirectory)/artifacts/lsretail/lsmag-two/
      composer init --name=lsretail/magento2 --type=project --require magento/product-community-edition:$(magentoVersion) --require $(composerName):$(composerVersion) --require-dev phpunit/phpunit:$(phpunitVersion) --repository '{"type": "composer", "url": "https://repo.magento.com/"}' --repository '{"type": "path", "url": "artifacts/*/*", "options": {"symlink": true}}' -s alpha -n
      composer config use-include-path true
      composer config --no-plugins allow-plugins true
      composer config minimum-stability stable
      composer config prefer-stable true
      php -r 'file_put_contents("composer.json", json_encode(array_merge_recursive(json_decode(file_get_contents("composer.json"), true), json_decode("{\"extra\": {\"magento-force\": \"override\"}, \"autoload\": {\"psr-4\": {\"Magento\\\\Framework\\\\\": \"lib/internal/Magento/Framework/\", \"Magento\\\\Setup\\\\\": \"setup/src/Magento/Setup/\", \"Magento\\\\\": \"app/code/Magento/\"}, \"psr-0\": {\"\": [\"app/code/\"]},\"files\": [\"app/etc/NonComposerComponentRegistration.php\"]}}", true), json_decode("$(composerOverride)", true)), JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));'
      echo '{"_comment": "These credentials were set up using some dummy Magento account", "http-basic": {"repo.magento.com": {"username": "$(MAGENTO_PUBLIC_KEY)", "password": "$(MAGENTO_PRIVATE_KEY)"}}}' > auth.json
      composer install
      composer require magento/magento-coding-standard --dev
      composer require lusitanian/oauth --dev
      find var vendor artifacts pub/static pub/media app/etc -type f -exec chmod u+w {} + && find var vendor artifacts pub/static pub/media app/etc -type d -exec chmod u+w {} + && chmod u+x bin/magento
    displayName: 'Magento Code Preparation'

  - script: |
      telnet 127.0.0.1 3306
      mysql --host 127.0.0.1 --user=root --password=mysql -e "CREATE DATABASE $(databaseName)"
    displayName: 'Magento Database Creation'

  - script: |
      cd $(magentoDirectory)
      php bin/magento setup:install --base-url=http://mag.localhost.com/ --backend-frontname=admin --db-host=127.0.0.1 --db-name=$(databaseName) --db-user=root --db-password=mysql --admin-firstname=John --admin-lastname=Doe --admin-email=john.doe@orba.co --admin-user=admin --admin-password=admin123 --language=en_US --currency=USD --timezone=America/Chicago --use-rewrites=1 --search-engine=elasticsearch7 --elasticsearch-host=127.0.0.1 --elasticsearch-port=9200
    displayName: 'Magento Installation Testing'

  - script: |
      cd $(magentoDirectory)
      php -d memory_limit=-1 bin/magento deploy:mode:set developer
    displayName: 'Magento developer mode Testing'

  - script: |
      cd $(magentoDirectory)
      php bin/magento config:set --scope=websites --scope-code=base ls_mag/service/base_url "$(BASE_URL)"
      php bin/magento config:set --scope=websites --scope-code=base ls_mag/service/selected_store "$(STORE_ID)"
      php bin/magento config:set --scope=websites --scope-code=base ls_mag/service/replicate_hierarchy_code "$(HIERARCHY_CODE)"
      php bin/magento config:set --scope=websites --scope-code=base ls_mag/service/version "$(CS_VERSION)"
      php bin/magento config:set --scope=websites --scope-code=base ls_mag/service/ls_central_version "$(LS_VERSION)"
      php bin/magento cache:flush
    displayName: 'Configure LS Retail Configuration'

  - script: |
      cd $(magentoDirectory)
      cp artifacts/lsretail/lsmag-two/dev/tests/api-functional/$(phpunitFile) dev/tests/api-functional/
      ./vendor/bin/phpunit -c $(pwd)/dev/tests/api-functional/$(phpunitFile) --testsuite "Ls_Retail_Api_Tests" --coverage-clover  $(magentoDirectory)/report/coverage.xml
    displayName: 'Ls Retail Modules API Tests Validation'

  - task: PublishCodeCoverageResults@2
    inputs:
      summaryFileLocation: '$(magentoDirectory)/report/coverage.xml'
    displayName: 'Ls Retail Modules Tests result Publishing'
