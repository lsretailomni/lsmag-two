trigger:
- master

resources:
  containers:
    - container: db
      image: mariadb:10.1
      env:
        MYSQL_DATABASE: my_app_test
        MYSQL_ROOT_PASSWORD: superSecret123
pool:
  vmImage: ubuntu-latest

services:
  db: db

variables:
  composerName: 'lsretail/lsmag-two'
  composerVersion: '^2.0'

strategy:
  matrix:
    magento_2_4_6_php_8_1:
      phpVersion: '8.1'
      magentoVersion: '2.4.6-p1'
      phpunitVersion: '^9'
      databaseName: 'magento_2_4_6_php_8_1'
      composerOverride: '{\"require-dev\": {\"allure-framework/allure-phpunit\": \"~1.2.0\"}, \"autoload\": {\"psr-4\": {\"Zend\\\\Mvc\\\\Controller\\\\\": \"setup/src/Zend/Mvc/Controller/\"}}}'
#    magento_2_2_8_php_7_1:
#     phpVersion: '7.1'
#      magentoVersion: '2.2.8'
#      phpunitVersion: '6.2.0'
#      databaseName: 'magento_2_2_8_7_1'
#      composerOverride: '{}'
#    magento_2_1_17_php_7_1:
#      phpVersion: '7.1'
#      magentoVersion: '2.1.17'
#      phpunitVersion: '4.1.0'
#      databaseName: 'magento_2_1_17_7_1'
#      composerOverride: '{}'

steps:

  - script: |
      sudo update-alternatives --set php /usr/bin/php$(phpVersion)
      sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
      sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
      sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
      sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
      php -version
    displayName: 'Use PHP version $(phpVersion)'

  - script: |
      printf 'Waiting for MySQL database to accept connections'
      until mysql --host db --user=root --password=superSecret123 --execute "SHOW DATABASES"; do
        printf '.'
        sleep 1;
      done;
    displayName: Wait for database to initialise

  - script: |
      curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elastic.gpg
      echo "deb [signed-by=/usr/share/keyrings/elastic.gpg] https://artifacts.elastic.co/packages/7.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list
      sudo apt update && sudo apt install openjdk-8-jre-headless
      export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
      sudo apt update && sudo apt install elasticsearch
      sudo systemctl start elasticsearch.service
      sleep 15
      sudo curl -XGET 'localhost:9200/'
    displayName: 'Install elasticsearch'

  - script: |
      mkdir ../magento_$(magentoVersion)_$(phpVersion)
      ln -s $PWD ../module
      cd ../magento_$(magentoVersion)_$(phpVersion)
      mkdir -p ../magento_$(magentoVersion)_$(phpVersion)/artifacts/lsretail/lsmag-two
      cp -a /home/vsts/work/1/s/. ../magento_$(magentoVersion)_$(phpVersion)/artifacts/lsretail/lsmag-two/
      composer init --name=lsretail/magento2 --type=project --require magento/product-community-edition:$(magentoVersion) --require $(composerName):$(composerVersion) --require-dev phpunit/phpunit:$(phpunitVersion) --repository '{"type": "composer", "url": "https://repo.magento.com/"}' --repository '{"type": "path", "url": "../module", "options": {"symlink": true}}' --repository '{"type": "path", "url": "artifacts/*/*", "options": {"symlink": true}}' -s alpha -n
      composer config use-include-path true
      composer config --no-plugins allow-plugins true
      php -r 'file_put_contents("composer.json", json_encode(array_merge_recursive(json_decode(file_get_contents("composer.json"), true), json_decode("{\"extra\": {\"magento-force\": \"override\"}, \"autoload\": {\"psr-4\": {\"Magento\\\\Framework\\\\\": \"lib/internal/Magento/Framework/\", \"Magento\\\\Setup\\\\\": \"setup/src/Magento/Setup/\", \"Magento\\\\\": \"app/code/Magento/\"}, \"psr-0\": {\"\": [\"app/code/\"]},\"files\": [\"app/etc/NonComposerComponentRegistration.php\"]}}", true), json_decode("$(composerOverride)", true)), JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));'
      echo '{"_comment": "These credentials were set up using some dummy Magento account", "http-basic": {"repo.magento.com": {"username": "7830c2f645e21175655f103ec7ccf5db", "password": "6facd42d017a332f90267fb28d4e46f9"}}}' > auth.json
      composer install
      find var vendor pub/static pub/media app/etc -type f -exec chmod u+w {} + && find var vendor pub/static pub/media app/etc -type d -exec chmod u+w {} + && chmod u+x bin/magento
    displayName: 'Magento code preparation'

  - script: |
      telnet 127.0.0.1 3306
      mysql -h db -P 3306 -u root -psuperSecret123 -e "CREATE DATABASE $(databaseName)"
    displayName: 'Magento database creation'

  - script: ../magento_$(magentoVersion)_$(phpVersion)/bin/magento setup:install --base-url=http://magento.$(magentoVersion).$(phpVersion).local/ --backend-frontname=admin --db-host=localhost --db-name=$(databaseName) --db-user=root --db-password=root --admin-firstname=John --admin-lastname=Doe --admin-email=john.doe@orba.co --admin-user=admin --admin-password=admin123 --language=en_US --currency=USD --timezone=America/Chicago --use-rewrites=1 --search-engine=elasticsearch7 --elasticsearch-host=localhost --elasticsearch-port=9200
    displayName: 'Magento installation testing'

  - script: ../magento_$(magentoVersion)_$(phpVersion)/bin/magento deploy:mode:set production
    displayName: 'Magento production mode testing'

  - script: |
      cd ../magento_$(magentoVersion)_$(phpVersion)
      cp ../magento_$(magentoVersion)_$(phpVersion)/artifacts/lsretail/lsmag-two/dev/tests/unit/azure-pipelines-phpunit.xml ../magento_$(magentoVersion)_$(phpVersion)/dev/test/unit/
      ./vendor/bin/phpunit -c dev/tests/unit/azure-pipelines-phpunit.xml --testsuite "Ls_Retail_Unit_Tests" --log-junit $(System.DefaultWorkingDirectory)/junit-report_$(magentoVersion)_$(phpVersion).xml
    displayName: 'Module unit testing'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'junit-report_$(magentoVersion)_$(phpVersion).xml'
      searchFolder: '$(System.DefaultWorkingDirectory)'
    displayName: 'Module unit testing results publishing'
