trigger:
  branches:
    exclude:
      - '*'
resources:
  containers:
    - container: db
      image: $(MARIA_DB_IMAGE)
      ports:
        - '3306:3306'
      env:
        MYSQL_DATABASE: users
        MYSQL_USER: mysql
        MYSQL_PASSWORD: mysql
        MYSQL_ROOT_PASSWORD: mysql
    - container: elasticsearch
      image: $(ELASTIC_SEARCH_IMAGE)
      ports:
        - "9200:9200"
        - "9300:9300"
      env:
        discovery.type: single-node
        ES_JAVA_OPTS: -Xms1g -Xmx1g
        cluster.routing.allocation.disk.threshold_enabled: false
pool:
  vmImage: ubuntu-latest

services:
  db: db
  elasticsearch: elasticsearch

strategy:
  matrix:
    magento_2_4_6_php_8_1:
      phpVersion: '8.1'
      magentoVersion: '2.4.6-p1'
      databaseName: 'magento_2_4_6_php_8_1'
      composerOverride: '{}'
      phpunitVersion: '^9'

steps:

  - script: |
      sudo apt-get update
      sudo add-apt-repository ppa:ondrej/php -y
      sudo apt-get update
      sudo apt-get install -y php8.1 php8.1-cli php8.1-common php8.1-mbstring php8.1-xml php8.1-curl php8.1-mysql php8.1-bcmath php8.1-intl php8.1-soap php8.1-zip php8.1-readline php8.1-cgi php8.1-phpdbg php8.1-dev php8.1-opcache php8.1-cli php8.1-json php8.1-tokenizer
      sudo update-alternatives --set php /usr/bin/php$(phpVersion)
      sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
      sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
      sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
      sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
      php -version
    displayName: 'Use PHP Version $(phpVersion)'

  - script: |
      sudo apt-get install default-mysql-client
      printf 'Waiting for MySQL database to accept connections'
      until mysql --host 127.0.0.1 --user=mysql --password=mysql --execute "SHOW DATABASES"; do
        printf '.'
        sleep 1;
      done;
    displayName: 'Wait for Database to initialise'

  - script: |
      printf 'Waiting for elasticsearch to accept connections'
      until curl -XGET '0.0.0.0:9200/'; do
      printf '.'
      sleep 1;
      done;
    displayName: 'Wait for Elasticsearch to initialise'

  - script: |
      mkdir ../magento_$(magentoVersion)_$(phpVersion)
      cd ../magento_$(magentoVersion)_$(phpVersion)
      mkdir -p ../magento_$(magentoVersion)_$(phpVersion)/artifacts/lsretail/lsmag-two
      cp -a /home/vsts/work/1/s/. ../magento_$(magentoVersion)_$(phpVersion)/artifacts/lsretail/lsmag-two/
      composer init --name=lsretail/magento2 --type=project --require magento/product-community-edition:$(magentoVersion) --require $(composerName):$(composerVersion) --require-dev phpunit/phpunit:$(phpunitVersion) --repository '{"type": "composer", "url": "https://repo.magento.com/"}' --repository '{"type": "path", "url": "artifacts/*/*", "options": {"symlink": true}}' -s alpha -n
      composer config use-include-path true
      composer config --no-plugins allow-plugins true
      php -r 'file_put_contents("composer.json", json_encode(array_merge_recursive(json_decode(file_get_contents("composer.json"), true), json_decode("{\"extra\": {\"magento-force\": \"override\"}, \"autoload\": {\"psr-4\": {\"Magento\\\\Framework\\\\\": \"lib/internal/Magento/Framework/\", \"Magento\\\\Setup\\\\\": \"setup/src/Magento/Setup/\", \"Magento\\\\\": \"app/code/Magento/\"}, \"psr-0\": {\"\": [\"app/code/\"]},\"files\": [\"app/etc/NonComposerComponentRegistration.php\"]}}", true), json_decode("$(composerOverride)", true)), JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));'
      echo '{"_comment": "These credentials were set up using some dummy Magento account", "http-basic": {"repo.magento.com": {"username": "$(MAGENTO_PUBLIC_KEY)", "password": "$(MAGENTO_PRIVATE_KEY)"}}}' > auth.json
      composer install
      composer require magento/magento-coding-standard --dev
      find var vendor artifacts pub/static pub/media app/etc -type f -exec chmod u+w {} + && find var vendor artifacts pub/static pub/media app/etc -type d -exec chmod u+w {} + && chmod u+x bin/magento
    displayName: 'Magento Code Preparation'

  - script: |
      cd ../magento_$(magentoVersion)_$(phpVersion)
      ./vendor/bin/phpcs --standard=vendor/magento/magento-coding-standard/Magento2/ruleset.xml --ignore=artifacts/lsretail/lsmag-two/dev --warning-severity=8 --extensions=php artifacts/lsretail/
    displayName: 'Magento2 Coding Standards Validation'
  - script: |
      telnet 127.0.0.1 3306
      mysql --host 127.0.0.1 --user=root --password=mysql -e "CREATE DATABASE $(databaseName)"
    displayName: 'Magento Database Creation'

  - script: ../magento_$(magentoVersion)_$(phpVersion)/bin/magento setup:install --base-url=http://magento.$(magentoVersion).$(phpVersion).local/ --backend-frontname=admin --db-host=127.0.0.1 --db-name=$(databaseName) --db-user=root --db-password=mysql --admin-firstname=John --admin-lastname=Doe --admin-email=john.doe@orba.co --admin-user=admin --admin-password=admin123 --language=en_US --currency=USD --timezone=America/Chicago --use-rewrites=1 --search-engine=elasticsearch7 --elasticsearch-host=127.0.0.1 --elasticsearch-port=9200
    displayName: 'Magento Installation Testing'

  - script: |
      php -d memory_limit=-1 ../magento_$(magentoVersion)_$(phpVersion)/bin/magento deploy:mode:set developer -vvv || cat var/log/exception.log || cat var/log/system.log
    displayName: 'Magento set developer mode'

  - script: |
      php -d memory_limit=-1 ../magento_$(magentoVersion)_$(phpVersion)/bin/magento setup:upgrade -vvv || cat var/log/exception.log
    displayName: 'Magento setup upgrade'

  - script: |
      php -d memory_limit=-1 ../magento_$(magentoVersion)_$(phpVersion)/bin/magento setup:di:compile -vvv || cat var/log/exception.log
    displayName: 'Magento setup di compile'

  - script: |
      php -d memory_limit=-1 ../magento_$(magentoVersion)_$(phpVersion)/bin/magento setup:static-content:deploy -f -vvv || cat var/log/exception.log
    displayName: 'Magento static content deploy'

  - script: |
      cd ../magento_$(magentoVersion)_$(phpVersion)
      cp ../magento_$(magentoVersion)_$(phpVersion)/artifacts/lsretail/lsmag-two/dev/tests/unit/azure-pipelines-phpunit.xml ../magento_$(magentoVersion)_$(phpVersion)/dev/tests/unit/
      ./vendor/bin/phpunit -c dev/tests/unit/azure-pipelines-phpunit.xml --log-junit ../magento_$(magentoVersion)_$(phpVersion)/$(System.DefaultWorkingDirectory)/junit-report_$(magentoVersion)_$(phpVersion).xml
    displayName: 'Ls Retail Modules Unit Tests Validation'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'junit-report_$(magentoVersion)_$(phpVersion).xml'
      searchFolder: '../magento_$(magentoVersion)_$(phpVersion)/$(System.DefaultWorkingDirectory)'
    displayName: 'Ls Retail Modules Unit Tests results Publishing'

  - task: Bash@3
    displayName: "Output Magento Logs"
    inputs:
      targetType: 'inline'
      script: |
        echo "Showing Magento Logs..."

        # Check if logs directory exists
        if [ -d "var/log" ]; then
          echo "=== SYSTEM LOG ==="
          cat var/log/system.log || echo "system.log not found"

          echo "=== EXCEPTION LOG ==="
          cat var/log/exception.log || echo "exception.log not found"
        else
          echo "Log directory does not exist."
        fi
